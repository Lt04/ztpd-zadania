create type wlasciciel as object(imie varchar2(20), nazwisko varchar2(20));

alter type samochod add attribute(wl ref wlasciciel) CASCADE INCLUDING TABLE DATA;

create table wlas of wlasciciel;

insert into wlas values(new wlasciciel('Adrian', 'Nowak'));

update samochody s set s.wl = (select ref(w) from wlas w where nazwisko = 'Nowak');

DECLARE TYPE t_przedmioty IS VARRAY(10) OF VARCHAR2(20);
moje_przedmioty t_przedmioty := t_przedmioty('');
BEGIN
moje_przedmioty(1) := 'MATEMATYKA';
moje_przedmioty.EXTEND(9);
FOR i IN 2..10 LOOP
moje_przedmioty(i) := 'PRZEDMIOT_' || i;
END LOOP;
FOR i IN moje_przedmioty.FIRST()..moje_przedmioty.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moje_przedmioty(i));
END LOOP;
moje_przedmioty.TRIM(2);
FOR i IN moje_przedmioty.FIRST()..moje_przedmioty.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moje_przedmioty(i));
END LOOP;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
moje_przedmioty.EXTEND();
moje_przedmioty(9) := 9;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
moje_przedmioty.DELETE();
DBMS_OUTPUT.PUT_LINE('Limit: ' || moje_przedmioty.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moje_przedmioty.COUNT());
END;

set serveroutput on;
declare
type t_ksiazki is varray(10) of varchar2(30);
ksiazki t_ksiazki := t_ksiazki('');
begin
    ksiazki.extend(2);
    ksiazki(1) := 'tytul';
    ksiazki(2) := 'tytul2';
    FOR i IN ksiazki.FIRST()..ksiazki.LAST() LOOP DBMS_OUTPUT.PUT_LINE(ksiazki(i)); END LOOP;
    ksiazki.trim(2);
    FOR i IN ksiazki.FIRST()..ksiazki.LAST() LOOP DBMS_OUTPUT.PUT_LINE(ksiazki(i)); END LOOP;
end;

DECLARE
TYPE t_wykladowcy IS TABLE OF VARCHAR2(20);
moi_wykladowcy t_wykladowcy := t_wykladowcy();
BEGIN
moi_wykladowcy.EXTEND(2);
moi_wykladowcy(1) := 'MORZY';
moi_wykladowcy(2) := 'WOJCIECHOWSKI';
moi_wykladowcy.EXTEND(8);
FOR i IN 3..10 LOOP
moi_wykladowcy(i) := 'WYKLADOWCA_' || i;
END LOOP;
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END LOOP;
moi_wykladowcy.TRIM(2);
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END LOOP;
moi_wykladowcy.DELETE(5,7);
DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
IF moi_wykladowcy.EXISTS(i) THEN
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END IF;
END LOOP;
moi_wykladowcy(5) := 'ZAKRZEWICZ';
moi_wykladowcy(6) := 'KROLIKOWSKI';
moi_wykladowcy(7) := 'KOSZLAJDA';
FOR i IN moi_wykladowcy.FIRST()..moi_wykladowcy.LAST() LOOP
IF moi_wykladowcy.EXISTS(i) THEN
DBMS_OUTPUT.PUT_LINE(moi_wykladowcy(i));
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('Limit: ' || moi_wykladowcy.LIMIT());
DBMS_OUTPUT.PUT_LINE('Liczba elementow: ' || moi_wykladowcy.COUNT());
END;

declare
type t_miesiace is table of varchar(20);
miesiace t_miesiace := t_miesiace();
begin
    miesiace.extend(12);
    miesiace(1) := 'styczen';
    miesiace(2) := 'luty';
    miesiace(3) := 'marzec';
    miesiace(4) := 'kwiecien';
    miesiace(5) := 'maj';
    miesiace(6) := 'czerwiec';
    miesiace(7) := 'lipiec';
    miesiace(8) := 'sierpien';
    miesiace(9) := 'wrzesien';
    miesiace(10) := 'pazdziernik';
    miesiace(11) := 'listopad';
    miesiace(12) := 'grudzien';
    FOR i IN miesiace.FIRST()..miesiace.LAST() LOOP DBMS_OUTPUT.PUT_LINE(miesiace(i)); END LOOP;
    miesiace.trim(5);
    FOR i IN miesiace.FIRST()..miesiace.LAST() LOOP DBMS_OUTPUT.PUT_LINE(miesiace(i)); END LOOP;
end;

CREATE TYPE jezyki_obce AS VARRAY(10) OF VARCHAR2(20);
/
CREATE TYPE stypendium AS OBJECT (
nazwa VARCHAR2(50),
kraj  VARCHAR2(30),
jezyki jezyki_obce );
/
CREATE TABLE stypendia OF stypendium;
INSERT INTO stypendia VALUES(
'SOKRATES','FRANCJA',jezyki_obce('ANGIELSKI','FRANCUSKI','NIEMIECKI'));
INSERT INTO stypendia VALUES(
'ERASMUS','NIEMCY',jezyki_obce('ANGIELSKI','NIEMIECKI','HISZPANSKI'));
SELECT * FROM stypendia;
SELECT s.jezyki FROM stypendia s;
UPDATE STYPENDIA
SET jezyki = jezyki_obce('ANGIELSKI','NIEMIECKI','HISZPANSKI','FRANCUSKI')
WHERE nazwa = 'ERASMUS';
CREATE TYPE lista_egzaminow AS TABLE OF VARCHAR2(20);
/
CREATE TYPE semestr AS OBJECT (
numer NUMBER,
egzaminy lista_egzaminow );
/
CREATE TABLE semestry OF semestr
NESTED TABLE egzaminy STORE AS tab_egzaminy;
INSERT INTO semestry VALUES(
semestr(1,lista_egzaminow('MATEMATYKA','LOGIKA','ALGEBRA')));
INSERT INTO semestry VALUES(
semestr(2,lista_egzaminow('BAZY DANYCH','SYSTEMY OPERACYJNE')));
SELECT s.numer, e.*
FROM semestry s, TABLE(s.egzaminy) e;
SELECT e.*
FROM semestry s, TABLE ( s.egzaminy ) e;
SELECT * FROM TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=1 );
INSERT INTO TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 )
VALUES ('METODY NUMERYCZNE');
UPDATE TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 ) e
SET e.column_value = 'SYSTEMY ROZPROSZONE'
WHERE e.column_value = 'SYSTEMY OPERACYJNE';
DELETE FROM TABLE ( SELECT s.egzaminy FROM semestry s WHERE numer=2 ) e
WHERE e.column_value = 'BAZY DANYCH';

CREATE or replace TYPE produkty as table of varchar2(20);
create table zakupy(koszyk_produktow produkty)
nested table koszyk_produktow store as jakies_produkty;
insert into zakupy values(produkty('produkt1', 'produkt2'));
insert into zakupy values(produkty('produkt4', 'produkt2'));
insert into zakupy values(produkty('produkt1', 'produkt1'));
select * from zakupy;

set serveroutput on;

CREATE TYPE instrument AS OBJECT (
nazwa VARCHAR2(20),
dzwiek VARCHAR2(20),
MEMBER FUNCTION graj RETURN VARCHAR2 ) NOT FINAL;
/
CREATE TYPE BODY instrument AS
MEMBER FUNCTION graj RETURN VARCHAR2 IS
BEGIN
RETURN dzwiek;
END;
END;
/
CREATE TYPE instrument_dety UNDER instrument (
material VARCHAR2(20),
OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2,
MEMBER FUNCTION graj(glosnosc VARCHAR2) RETURN VARCHAR2 );
/
CREATE OR REPLACE TYPE BODY instrument_dety AS
OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 IS
BEGIN
RETURN 'dmucham: '||dzwiek;
END;
MEMBER FUNCTION graj(glosnosc VARCHAR2) RETURN VARCHAR2 IS
BEGIN
RETURN glosnosc||':'||dzwiek;
END;
END;
/
CREATE TYPE instrument_klawiszowy UNDER instrument (
producent VARCHAR2(20),
OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 );
/
CREATE OR REPLACE TYPE BODY instrument_klawiszowy AS
OVERRIDING MEMBER FUNCTION graj RETURN VARCHAR2 IS
BEGIN
RETURN 'stukam w klawisze: '||dzwiek;
END;
END;
/
DECLARE
tamburyn instrument := instrument('tamburyn','brzdek-brzdek');
trabka instrument_dety := instrument_dety('trabka','tra-ta-ta','metalowa');
fortepian instrument_klawiszowy := instrument_klawiszowy('fortepian','ping-ping','steinway');
BEGIN
dbms_output.put_line(tamburyn.graj);
dbms_output.put_line(trabka.graj);
dbms_output.put_line(trabka.graj('glosno'));
dbms_output.put_line(fortepian.graj);
END;

CREATE TYPE istota AS OBJECT (
nazwa VARCHAR2(20),
NOT INSTANTIABLE MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR )
NOT INSTANTIABLE NOT FINAL;
/
CREATE TYPE lew UNDER istota (
liczba_nog NUMBER,
OVERRIDING MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR );
/
CREATE OR REPLACE TYPE BODY lew AS
OVERRIDING MEMBER FUNCTION poluj(ofiara CHAR) RETURN CHAR IS
BEGIN
RETURN 'upolowana ofiara: '||ofiara;
END;
END;
/
DECLARE
KrolLew lew := lew('LEW',4);
InnaIstota istota := istota('JAKIES ZWIERZE');
BEGIN
DBMS_OUTPUT.PUT_LINE( KrolLew.poluj('antylopa') );
END;

DECLARE
tamburyn instrument;
cymbalki instrument;
trabka instrument_dety;
saksofon instrument_dety;
BEGIN
tamburyn := instrument('tamburyn','brzdek-brzdek');
cymbalki := instrument_dety('cymbalki','ding-ding','metalowe');
trabka   := instrument_dety('trabka','tra-ta-ta','metalowa');
--saksofon := instrument('saksofon','tra-taaaa');
--saksofon := TREAT( instrument('saksofon','tra-taaaa') AS instrument_dety);
END;

CREATE TABLE instrumenty OF instrument;
/
INSERT INTO instrumenty VALUES (
instrument('tamburyn','brzdek-brzdek') );
/
INSERT INTO instrumenty VALUES (
instrument_dety('trabka','tra-ta-ta','metalowa') );
/
INSERT INTO instrumenty VALUES (
instrument_klawiszowy('fortepian','ping-ping','steinway') );
/
SELECT i.nazwa, i.graj() FROM instrumenty i;

CREATE TABLE PRZEDMIOTY (
NAZWA VARCHAR2(50),
NAUCZYCIEL NUMBER REFERENCES PRACOWNICY(ID_PRAC));
/
INSERT INTO PRZEDMIOTY  VALUES ('BAZY DANYCH',100);
INSERT INTO PRZEDMIOTY  VALUES ('SYSTEMY OPERACYJNE',100);
INSERT INTO PRZEDMIOTY  VALUES ('PROGRAMOWANIE',110);
INSERT INTO PRZEDMIOTY VALUES ('SIECI KOMPUTEROWE',110);
INSERT INTO PRZEDMIOTY  VALUES ('BADANIA OPERACYJNE',120);
INSERT INTO PRZEDMIOTY  VALUES ('GRAFIKA KOMPUTEROWA',120);
INSERT INTO PRZEDMIOTY  VALUES ('BAZY DANYCH',130);
INSERT INTO PRZEDMIOTY  VALUES ('SYSTEMY OPERACYJNE',140);
INSERT INTO PRZEDMIOTY  VALUES ('PROGRAMOWANIE',140);
INSERT INTO PRZEDMIOTY  VALUES ('SIECI KOMPUTEROWE',140);
INSERT INTO PRZEDMIOTY  VALUES ('BADANIA OPERACYJNE',150);
INSERT INTO PRZEDMIOTY  VALUES ('GRAFIKA KOMPUTEROWA',150);
INSERT INTO PRZEDMIOTY  VALUES ('BAZY DANYCH',160);
INSERT INTO PRZEDMIOTY  VALUES ('SYSTEMY OPERACYJNE',160);
INSERT INTO PRZEDMIOTY  VALUES ('PROGRAMOWANIE',170);
INSERT INTO PRZEDMIOTY  VALUES ('SIECI KOMPUTEROWE',180);
INSERT INTO PRZEDMIOTY  VALUES ('BADANIA OPERACYJNE',180);
INSERT INTO PRZEDMIOTY  VALUES ('GRAFIKA KOMPUTEROWA',190);
INSERT INTO PRZEDMIOTY  VALUES ('GRAFIKA KOMPUTEROWA',200);
INSERT INTO PRZEDMIOTY  VALUES ('GRAFIKA KOMPUTEROWA',210);
INSERT INTO PRZEDMIOTY  VALUES ('PROGRAMOWANIE',220);
INSERT INTO PRZEDMIOTY  VALUES ('SIECI KOMPUTEROWE',220);
INSERT INTO PRZEDMIOTY  VALUES ('BADANIA OPERACYJNE',230);

CREATE TYPE ZESPOL AS OBJECT (
ID_ZESP NUMBER,
NAZWA VARCHAR2(50),
ADRES VARCHAR2(100));

CREATE OR REPLACE VIEW ZESPOLY_V OF ZESPOL
WITH OBJECT IDENTIFIER(ID_ZESP)
AS SELECT ID_ZESP, NAZWA, ADRES FROM ZESPOLY;

CREATE TYPE PRZEDMIOTY_TAB AS TABLE OF VARCHAR2(100);
/
CREATE TYPE PRACOWNIK AS OBJECT (
ID_PRAC NUMBER,
NAZWISKO VARCHAR2(30),
ETAT VARCHAR2(20),
ZATRUDNIONY DATE,
PLACA_POD NUMBER(10,2),
MIEJSCE_PRACY REF ZESPOL,
PRZEDMIOTY PRZEDMIOTY_TAB,
MEMBER FUNCTION ILE_PRZEDMIOTOW RETURN NUMBER);
/
CREATE OR REPLACE TYPE BODY PRACOWNIK AS
MEMBER FUNCTION ILE_PRZEDMIOTOW RETURN NUMBER IS
BEGIN
RETURN PRZEDMIOTY.COUNT();
END ILE_PRZEDMIOTOW;
END;

CREATE OR REPLACE VIEW PRACOWNICY_V OF PRACOWNIK
WITH OBJECT IDENTIFIER (ID_PRAC)
AS SELECT ID_PRAC, NAZWISKO, ETAT, ZATRUDNIONY, PLACA_POD,
MAKE_REF(ZESPOLY_V,ID_ZESP),
CAST(MULTISET( SELECT NAZWA FROM PRZEDMIOTY WHERE NAUCZYCIEL=P.ID_PRAC ) AS
PRZEDMIOTY_TAB )
FROM PRACOWNICY P;

SELECT * FROM PRACOWNICY_V;
SELECT P.NAZWISKO, P.ETAT, P.MIEJSCE_PRACY.NAZWA FROM PRACOWNICY_V P;
SELECT P.NAZWISKO, P.ILE_PRZEDMIOTOW() FROM PRACOWNICY_V P;
SELECT * FROM TABLE( SELECT PRZEDMIOTY FROM PRACOWNICY_V WHERE NAZWISKO='WEGLARZ' );
SELECT NAZWISKO, CURSOR( SELECT PRZEDMIOTY FROM PRACOWNICY_V WHERE ID_PRAC=P.ID_PRAC) FROM PRACOWNICY_V P;

CREATE TABLE PISARZE (
ID_PISARZA NUMBER PRIMARY KEY,
NAZWISKO VARCHAR2(20),
DATA_UR DATE );
/
CREATE TABLE KSIAZKI (
ID_KSIAZKI NUMBER PRIMARY KEY,
ID_PISARZA NUMBER NOT NULL REFERENCES PISARZE,
TYTUL VARCHAR2(50),
DATA_WYDANIE DATE );
/
INSERT INTO PISARZE
VALUES(10,'SIENKIEWICZ',DATE '1880-01-01');
/
INSERT INTO PISARZE
VALUES(20,'PRUS',DATE '1890-04-12');
/
INSERT INTO PISARZE
VALUES(30,'ZEROMSKI',DATE '1899-09-11');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(10,10,'OGNIEM I MIECZEM',DATE '1990-01-05');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(20,10,'POTOP',DATE '1975-12-09');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(30,10,'PAN WOLODYJOWSKI',DATE '1987-02-15');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(40,20,'FARAON',DATE '1948-01-21');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(50,20,'LALKA',DATE '1994-08-01');
/
INSERT INTO KSIAZKI(ID_KSIAZKI,ID_PISARZA,TYTUL,DATA_WYDANIE)
VALUES(60,30,'PRZEDWIOSNIE',DATE '1938-02-02');


CREATE TYPE ksiazki_tab AS TABLE OF VARCHAR2(100);
/

create type pisarz as object(
imie varchar2(20),
nazwisko varchar2(20),
ksiazki ksiazki_tab,
member function ile_ksiazek return number);
/
create or replace type body pisarz as
member function ile_ksiazek return number is
begin
return ksiazki.count();
end ile_ksiazek;
end;

create type ksiazka as object(
nazwa varchar2(20),
data_wydania date,
autor ref pisarz,
member function wiek return number);
/
create or replace type body ksiazka as
member function wiek return number is
begin
return EXTRACT (YEAR FROM CURRENT_DATE) - EXTRACT (YEAR FROM data_wydania);
end ile_ksiazek;
end;
